import { ChatMessage, PropertySearchResult, ChatSuggestion } from '@/types/chatbot';
import { chatbotApi } from './api';

export interface ChatbotResponse {
  message: string;
  type: 'text' | 'property_results' | 'suggestions' | 'error';
  data?: any;
  suggestions?: ChatSuggestion[];
}

export class ChatbotEngine {
  private static instance: ChatbotEngine;
  
  public static getInstance(): ChatbotEngine {
    if (!ChatbotEngine.instance) {
      ChatbotEngine.instance = new ChatbotEngine();
    }
    return ChatbotEngine.instance;
  }

  // Keywords for different intents
  private readonly intents = {
    greeting: ['hello', 'hi', 'hey', 'good morning', 'good afternoon', 'good evening', 'xin ch√†o', 'ch√†o'],
    search: ['find', 'search', 'show', 'look for', 'want', 'need', 'looking for', 't√¨m', 't√¨m ki·∫øm', 'hi·ªÉn th·ªã'],
    price: ['price', 'cost', 'budget', 'cheap', 'expensive', 'under', 'below', 'above', 'gi√°', 'ti·ªÅn', 'd∆∞·ªõi', 'tr√™n'],
    location: ['in', 'at', 'near', 'around', 'district', 'city', 'area', '·ªü', 't·∫°i', 'g·∫ßn', 'qu·∫≠n', 'th√†nh ph·ªë'],
    propertyType: ['apartment', 'house', 'villa', 'office', 'condo', 'studio', 'chung c∆∞', 'nh√†', 'bi·ªát th·ª±', 'vƒÉn ph√≤ng'],
    listingType: ['rent', 'sale', 'buy', 'lease', 'cho thu√™', 'b√°n', 'mua'],
    features: ['bedroom', 'bathroom', 'bed', 'bath', 'room', 'sqm', 'square', 'ph√≤ng ng·ªß', 'ph√≤ng t·∫Øm', 'm2'],
    help: ['help', 'what can you do', 'commands', 'how to', 'guide', 'tr·ª£ gi√∫p', 'h∆∞·ªõng d·∫´n'],
    contact: ['contact', 'phone', 'email', 'call', 'li√™n h·ªá', 's·ªë ƒëi·ªán tho·∫°i'],
    about: ['about', 'who are you', 'what are you', 'gi·ªõi thi·ªáu', 'b·∫°n l√† ai'],
    thanks: ['thank', 'thanks', 'thank you', 'c·∫£m ∆°n', 'c√°m ∆°n'],
    goodbye: ['bye', 'goodbye', 'see you', 't·∫°m bi·ªát', 'ch√†o t·∫°m bi·ªát'],
  };

  // Common responses
  private readonly responses = {
    greeting: [
      "Hello! I'm your real estate assistant. How can I help you find the perfect property today?",
      "Hi there! I'm here to help you with property searches. What are you looking for?",
      "Welcome! I can help you find apartments, houses, and more. What interests you?",
      "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω b·∫•t ƒë·ªông s·∫£n c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?",
      "Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm b·∫•t ƒë·ªông s·∫£n. B·∫°n ƒëang quan t√¢m ƒë·∫øn lo·∫°i n√†o?"
    ],
    help: `I can help you with:
üè† **Property Search** - Find apartments, houses, villas, offices
üí∞ **Price Filtering** - Search by budget or price range
üìç **Location Search** - Find properties in specific cities or districts
üõèÔ∏è **Feature Filtering** - Search by bedrooms, bathrooms, area
üìã **Listing Types** - Find properties for sale or rent

**Example queries:**
‚Ä¢ "Show me apartments in Ho Chi Minh City"
‚Ä¢ "Find houses under 5 billion VND"
‚Ä¢ "3-bedroom apartments for rent"
‚Ä¢ "Villas in District 1"
‚Ä¢ "T√¨m chung c∆∞ ·ªü H·ªì Ch√≠ Minh"
‚Ä¢ "Nh√† d∆∞·ªõi 3 t·ª∑ ƒë·ªìng"

**Commands:**
‚Ä¢ Type "help" for this guide
‚Ä¢ Type "contact" for contact information
‚Ä¢ Type "about" to learn more about me`,
    about: `I'm an AI-powered real estate assistant created to help you find the perfect property!

ü§ñ **What I can do:**
‚Ä¢ Search through thousands of properties
‚Ä¢ Filter by price, location, and features
‚Ä¢ Provide detailed property information
‚Ä¢ Answer questions about real estate
‚Ä¢ Support both English and Vietnamese

üè† **Property Types I know:**
‚Ä¢ Apartments (Chung c∆∞)
‚Ä¢ Houses (Nh√†)
‚Ä¢ Villas (Bi·ªát th·ª±)
‚Ä¢ Offices (VƒÉn ph√≤ng)

I'm here 24/7 to help you find your dream property!`,
    contact: `üìû **Contact Information:**

üè¢ **Real Estate Platform**
üìß Email: support@realestate.com
üì± Phone: +84 123 456 789
üåê Website: www.realestate.com

üïí **Business Hours:**
Monday - Friday: 8:00 AM - 6:00 PM
Saturday: 9:00 AM - 5:00 PM
Sunday: Closed

üí¨ **Need immediate help?**
I'm available 24/7 for property searches and questions!`,
    thanks: [
      "You're welcome! Is there anything else I can help you with?",
      "Happy to help! Let me know if you need to find more properties.",
      "My pleasure! Feel free to ask if you have more questions.",
      "Kh√¥ng c√≥ g√¨! B·∫°n c√≤n c·∫ßn t√¨m hi·ªÉu g√¨ kh√°c kh√¥ng?"
    ],
    goodbye: [
      "Goodbye! Come back anytime you need help finding properties.",
      "See you later! Good luck with your property search!",
      "Take care! I'll be here whenever you need real estate assistance.",
      "T·∫°m bi·ªát! Ch√∫c b·∫°n t√¨m ƒë∆∞·ª£c b·∫•t ƒë·ªông s·∫£n ∆∞ng √Ω!"
    ],
    noResults: "I couldn't find any properties matching your criteria. Try adjusting your search terms or budget.",
    error: "I'm sorry, I encountered an error while searching. Please try again or contact support.",
    unclear: "I'm not sure what you're looking for. Could you be more specific? For example, try 'Find 2-bedroom apartments in Ho Chi Minh City' or type 'help' for more options."
  };

  public async processMessage(message: string): Promise<ChatbotResponse> {
    const normalizedMessage = message.toLowerCase().trim();
    
    try {
      // Check for greeting
      if (this.matchesIntent(normalizedMessage, this.intents.greeting)) {
        return {
          message: this.getRandomResponse(this.responses.greeting),
          type: 'suggestions',
          suggestions: [
            { text: "Show me apartments", action: "search_apartments" },
            { text: "Find houses for sale", action: "search_houses_sale" },
            { text: "Properties under 5B VND", action: "search_budget" },
            { text: "Help", action: "help" }
          ]
        };
      }

      // Check for help
      if (this.matchesIntent(normalizedMessage, this.intents.help)) {
        return {
          message: this.responses.help,
          type: 'suggestions',
          suggestions: [
            { text: "Find apartments", action: "search_apartments" },
            { text: "Search by location", action: "search_location" },
            { text: "Filter by price", action: "search_price" },
            { text: "Browse all properties", action: "search_all" }
          ]
        };
      }

      // Check for about
      if (this.matchesIntent(normalizedMessage, this.intents.about)) {
        return {
          message: this.responses.about,
          type: 'suggestions',
          suggestions: [
            { text: "Find properties", action: "search_all" },
            { text: "Contact info", action: "contact" },
            { text: "Help", action: "help" }
          ]
        };
      }

      // Check for contact
      if (this.matchesIntent(normalizedMessage, this.intents.contact)) {
        return {
          message: this.responses.contact,
          type: 'suggestions',
          suggestions: [
            { text: "Find properties", action: "search_all" },
            { text: "About me", action: "about" },
            { text: "Help", action: "help" }
          ]
        };
      }

      // Check for thanks
      if (this.matchesIntent(normalizedMessage, this.intents.thanks)) {
        return {
          message: this.getRandomResponse(this.responses.thanks),
          type: 'suggestions',
          suggestions: [
            { text: "Find more properties", action: "search_all" },
            { text: "Search by location", action: "search_location" },
            { text: "Help", action: "help" }
          ]
        };
      }

      // Check for goodbye
      if (this.matchesIntent(normalizedMessage, this.intents.goodbye)) {
        return {
          message: this.getRandomResponse(this.responses.goodbye),
          type: 'suggestions',
          suggestions: [
            { text: "Actually, find properties", action: "search_all" },
            { text: "Contact info", action: "contact" }
          ]
        };
      }

      // Check for property search or any message that might be a search query
      if (this.matchesIntent(normalizedMessage, this.intents.search) || this.looksLikeSearchQuery(normalizedMessage)) {
        return await this.handleChatbotSearch(message);
      }

      // Default response for unclear messages
      return {
        message: this.responses.unclear,
        type: 'suggestions',
        suggestions: [
          { text: "Show me all properties", action: "search_all" },
          { text: "Find apartments", action: "search_apartments" },
          { text: "Help", action: "help" }
        ]
      };

    } catch (error) {
      console.error('Chatbot error:', error);
      return {
        message: this.responses.error,
        type: 'error'
      };
    }
  }

  private async handleChatbotSearch(message: string): Promise<ChatbotResponse> {
    try {
      console.log('üîç Sending query to chatbot API:', message);
      const response = await chatbotApi.quickSearch(message);
      console.log('‚úÖ Chatbot API response:', response);

      // Handle different response types from the backend
      if (response.properties && response.properties.length > 0) {
        const resultMessage = response.message || `Found ${response.properties.length} properties matching your search:`;

        return {
          message: resultMessage,
          type: 'property_results',
          data: {
            properties: response.properties,
            total: response.properties.length,
            query: message
          },
          suggestions: [
            { text: "Refine search", action: "refine_search" },
            { text: "Show more details", action: "show_details" },
            { text: "New search", action: "new_search" }
          ]
        };
      } else if (response.message) {
        // Backend returned a text response
        return {
          message: response.message,
          type: 'text',
          suggestions: [
            { text: "Show all properties", action: "search_all" },
            { text: "Try different search", action: "search_location" },
            { text: "Help", action: "help" }
          ]
        };
      } else {
        // No results found
        return {
          message: this.responses.noResults,
          type: 'suggestions',
          suggestions: [
            { text: "Show all properties", action: "search_all" },
            { text: "Try different location", action: "search_location" },
            { text: "Adjust price range", action: "search_price" }
          ]
        };
      }

    } catch (error) {
      console.error('‚ùå Chatbot API error:', error);
      return {
        message: "I'm having trouble processing your request right now. Please try again later.",
        type: 'error',
        suggestions: [
          { text: "Try again", action: "retry" },
          { text: "Show all properties", action: "search_all" },
          { text: "Help", action: "help" }
        ]
      };
    }
  }

  private looksLikeSearchQuery(message: string): boolean {
    // Check if message contains property-related keywords or seems like a search
    const searchIndicators = [
      ...this.intents.propertyType,
      ...this.intents.location,
      ...this.intents.price,
      ...this.intents.features,
      'apartment', 'house', 'villa', 'office', 'property', 'properties',
      'chung c∆∞', 'nh√†', 'bi·ªát th·ª±', 'vƒÉn ph√≤ng', 'b·∫•t ƒë·ªông s·∫£n',
      'bedroom', 'bathroom', 'price', 'cost', 'budget',
      'ph√≤ng ng·ªß', 'ph√≤ng t·∫Øm', 'gi√°', 'ti·ªÅn',
      'ho chi minh', 'hanoi', 'da nang', 'district', 'qu·∫≠n'
    ];

    return searchIndicators.some(indicator => message.includes(indicator));
  }

  private matchesIntent(message: string, keywords: string[]): boolean {
    return keywords.some(keyword => message.includes(keyword));
  }

  private getRandomResponse(responses: string[]): string {
    return responses[Math.floor(Math.random() * responses.length)];
  }

  public generateSuggestions(context?: string): ChatSuggestion[] {
    const baseSuggestions = [
      { text: "Show me apartments", action: "search_apartments" },
      { text: "Find houses for sale", action: "search_houses_sale" },
      { text: "Properties under 5B VND", action: "search_budget" },
      { text: "What's available for rent?", action: "search_rent" },
      { text: "Help", action: "help" }
    ];
    
    return baseSuggestions;
  }
}
